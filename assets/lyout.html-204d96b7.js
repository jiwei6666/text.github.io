import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as n,e}from"./app-f63eef9d.js";const t={},o=e(`<h2 id="_1-百分比布局" tabindex="-1"><a class="header-anchor" href="#_1-百分比布局" aria-hidden="true">#</a> 1.百分比布局</h2><p>窗口的hight和width改变的时候，通过给 height、width 、padding、border、margin等 属性都是依托父组件的宽高（margin 和 padding 都可以使用百分比值的形式，但有一点可能和通常的想法不同，就是 margin-top、margin-bottom、padding-top、padding-bottom的百分比值参照的不是容器的高度，而是父级容器的宽度）</p><h4 id="子元素的-top-和-bottom-如果设置百分比-则相对于直接非-static-定位-默认定位-的父元素的高度-同样-子元素的-left-和-right-如果设置百分比-则相对于直接非-static-定位-默认定位的-父元素的宽度。" tabindex="-1"><a class="header-anchor" href="#子元素的-top-和-bottom-如果设置百分比-则相对于直接非-static-定位-默认定位-的父元素的高度-同样-子元素的-left-和-right-如果设置百分比-则相对于直接非-static-定位-默认定位的-父元素的宽度。" aria-hidden="true">#</a> 子元素的 top 和 bottom 如果设置百分比，则相对于直接非 static 定位（默认定位）的父元素的高度，同样，子元素的 left 和 right 如果设置百分比，则相对于直接非 static 定位（默认定位的）父元素的宽度。</h4><h4 id="子元素的-padding-和-margin-如果设置百分比-不论是垂直方向或者是水平方向都相对于直接父亲元素的-width-而与父元素的-height-无关。border-radius-为百分比-则是相对于自身的宽度" tabindex="-1"><a class="header-anchor" href="#子元素的-padding-和-margin-如果设置百分比-不论是垂直方向或者是水平方向都相对于直接父亲元素的-width-而与父元素的-height-无关。border-radius-为百分比-则是相对于自身的宽度" aria-hidden="true">#</a> 子元素的 padding 和 margin 如果设置百分比，不论是垂直方向或者是水平方向都相对于直接父亲元素的 width，而与父元素的 height 无关。border-radius 为百分比，则是相对于自身的宽度</h4><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点：</h3><p>计算困难，如果我们要定义一个元素的宽度和高度，按照设计稿，必须换算成百分比单位</p><h2 id="_2、媒体查询布局" tabindex="-1"><a class="header-anchor" href="#_2、媒体查询布局" aria-hidden="true">#</a> 2、媒体查询布局</h2><p>通过@media 媒体查询，可以通过给不同屏幕的大小编写不同的样式来实现响应式的布局。</p><p>响应式缺点：如果浏览器大小改变时，需要改变的样式太多，那么多套样式代码会很繁琐。</p><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法:</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@media mediatype and not <span class="token function">only</span> <span class="token punctuation">(</span><span class="token parameter">media feature</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> css<span class="token operator">-</span>code<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">//也可以针对不同的媒体使用不同的stylesheets:</span>
    <span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">&quot;stylesheet&quot;</span> media<span class="token operator">=</span><span class="token string">&quot;mediatype and not only (media feature)&quot;</span> href<span class="token string">&quot;mystylesheet.css&quot;</span><span class="token operator">&gt;</span>
    
    <span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">&quot;stylesheet&quot;</span> href<span class="token operator">=</span><span class="token string">&quot;styleB.css&quot;</span> media<span class="token operator">=</span><span class="token string">&quot;screen and (max-width: 800px)&quot;</span><span class="token operator">&gt;</span>
    
   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>上面将浏览器宽度小于等于80px时，应用 styleA 。<span class="token operator">--</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-device-width</span><span class="token punctuation">:</span>960px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>
    <span class="token selector">body</span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),i=[o];function p(r,c){return s(),n("div",null,i)}const u=a(t,[["render",p],["__file","lyout.html.vue"]]);export{u as default};
