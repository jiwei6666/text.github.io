const n=JSON.parse(`{"key":"v-60ae2539","path":"/posts/node/commander.html","title":"commander 管理命令","lang":"zh-CN","frontmatter":{"title":"commander 管理命令","icon":"pen-to-square","date":"2023-06-29T00:00:00.000Z","category":["commander"],"tag":["node","commander"],"description":"\\"commander\\"是一个流行的第三方库，用于创建命令行工具。使用\\"commander\\"库，可以轻松地定义命令行选项和参数，并处理用户输入的命令。这使得开发者可以快速构建自己的命令行应用程序，例如CLI工具、脚本或服务等。\\"commander\\"库还提供了许多有用的功能，如帮助信息生成、版本控制、子命令支持等。因此，\\"commander\\"在Node.js中被广泛用于开发各种类型的命令行应用程序。 commander的基本使用 const program = require('commander'); //node.js命令行界面的完整解决方案 const command = require('./command/index') program .command('init') .action(() =&gt; { console.log('command init') command.init() }); const argvList = process.argv program.parse(argvList)","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/text.github.io/posts/node/commander.html"}],["meta",{"property":"og:site_name","content":"jiwei.zhao"}],["meta",{"property":"og:title","content":"commander 管理命令"}],["meta",{"property":"og:description","content":"\\"commander\\"是一个流行的第三方库，用于创建命令行工具。使用\\"commander\\"库，可以轻松地定义命令行选项和参数，并处理用户输入的命令。这使得开发者可以快速构建自己的命令行应用程序，例如CLI工具、脚本或服务等。\\"commander\\"库还提供了许多有用的功能，如帮助信息生成、版本控制、子命令支持等。因此，\\"commander\\"在Node.js中被广泛用于开发各种类型的命令行应用程序。 commander的基本使用 const program = require('commander'); //node.js命令行界面的完整解决方案 const command = require('./command/index') program .command('init') .action(() =&gt; { console.log('command init') command.init() }); const argvList = process.argv program.parse(argvList)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-08T06:39:25.000Z"}],["meta",{"property":"article:author","content":"jiwei.zhao"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"commander"}],["meta",{"property":"article:published_time","content":"2023-06-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-08T06:39:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"commander 管理命令\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-29T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-08T06:39:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"jiwei.zhao\\",\\"url\\":\\"https://mrhope.site\\"}]}"]]},"headers":[{"level":2,"title":"commander的基本使用","slug":"commander的基本使用","link":"#commander的基本使用","children":[]},{"level":2,"title":"commander官网","slug":"commander官网","link":"#commander官网","children":[]}],"git":{"createdTime":1702017565000,"updatedTime":1702017565000,"contributors":[{"name":"jiwei.zhao","email":"jiwei.zhao@zhaopin.com.cn","commits":1}]},"readingTime":{"minutes":0.71,"words":213},"filePathRelative":"posts/node/commander.md","localizedDate":"2023年6月29日","excerpt":"<p>\\"commander\\"是一个流行的第三方库，用于创建命令行工具。使用\\"commander\\"库，可以轻松地定义命令行选项和参数，并处理用户输入的命令。这使得开发者可以快速构建自己的命令行应用程序，例如CLI工具、脚本或服务等。\\"commander\\"库还提供了许多有用的功能，如帮助信息生成、版本控制、子命令支持等。因此，\\"commander\\"在Node.js中被广泛用于开发各种类型的命令行应用程序。</p>\\n<h2> commander的基本使用</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> program <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'commander'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">//node.js命令行界面的完整解决方案</span>\\n<span class=\\"token keyword\\">const</span> command <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'./command/index'</span><span class=\\"token punctuation\\">)</span>\\n\\nprogram\\n    <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">command</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'init'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">action</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n        console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'command init'</span><span class=\\"token punctuation\\">)</span>\\n        command<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">init</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">const</span> argvList <span class=\\"token operator\\">=</span> process<span class=\\"token punctuation\\">.</span>argv\\nprogram<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">parse</span><span class=\\"token punctuation\\">(</span>argvList<span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
